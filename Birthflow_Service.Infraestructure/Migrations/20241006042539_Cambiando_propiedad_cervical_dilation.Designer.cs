// <auto-generated />
using System;
using Birthflow_Service.Infraestructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Birthflow_Service.Infraestructure.Migrations
{
    [DbContext(typeof(BirthflowDbContext))]
    [Migration("20241006042539_Cambiando_propiedad_cervical_dilation")]
    partial class Cambiando_propiedad_cervical_dilation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BirthflowService.Domain.Entities.ActivationTokenEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActivationToken", "Auth");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.CervicalDilationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Hour")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid>("PartographId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RemOrRam")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PartographId");

                    b.ToTable("CervicalDilations", "Partograph");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.ChildbirthNoteEntity", b =>
                {
                    b.Property<Guid>("PartographId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alumbramiento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Apgar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Caputto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Circular")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Expulsivo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HuellaPlantar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lamniotico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Meconio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Miccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Placenta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Temperature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PartographId");

                    b.ToTable("ChildbirthNote", "Partograph");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.ContractionFrequencyEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid>("PartographId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartographId");

                    b.ToTable("ContractionFrequency", "Partograph");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.FetalHeartRateEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid>("PartographId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PartographId");

                    b.ToTable("FetalHeartRate", "Partograph");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.GroupEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Group", "Partograph");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.HodgePlanesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HodgePlanes", "Partograph");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "OP",
                            Description = "Occipito Posterior"
                        },
                        new
                        {
                            Id = 2,
                            Code = "OIIA",
                            Description = "Occipito Izquierda Anterior"
                        },
                        new
                        {
                            Id = 3,
                            Code = "OIIT",
                            Description = "Occipito Izquierda Transversa"
                        },
                        new
                        {
                            Id = 4,
                            Code = "OIIP",
                            Description = "Occipito Izquierda Posterior"
                        },
                        new
                        {
                            Id = 5,
                            Code = "OS",
                            Description = "Occipito Sacro"
                        },
                        new
                        {
                            Id = 6,
                            Code = "OIDA",
                            Description = "Occipito Derecha Anterior"
                        },
                        new
                        {
                            Id = 7,
                            Code = "OIDT",
                            Description = "Occipito Derecha Transversa"
                        },
                        new
                        {
                            Id = 8,
                            Code = "OIDP",
                            Description = "Occipito Derecha Posterior"
                        });
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.MedicalSurveillanceTableEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ArterialPressure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractionsDuration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FetalHeartRate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrequencyContractions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Letter")
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("MaternalPosition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaternalPulse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PartographId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PartographId");

                    b.ToTable("MedicalSurveillancesTable", "Partograph");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.NotificationEntity", b =>
                {
                    b.Property<long>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Identificator")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotificationTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduledFor")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("Notification", "Notification");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.NotificationTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NotificationType", "Notification");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PartographAuditLogEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ChangedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PartographId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PartographVersionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartographVersionId");

                    b.ToTable("PartographAuditLog", "Partograph");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PartographEntity", b =>
                {
                    b.Property<Guid>("PartographId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecordName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WorkTime")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("PartographId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("WorkTime");

                    b.ToTable("Partographs", "Partograph");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PartographGroupEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PartographGroup", "Partograph");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PartographGroupItemEntity", b =>
                {
                    b.Property<Guid>("PartographId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("PartographGroupId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PartographId", "PartographGroupId");

                    b.HasIndex("PartographGroupId");

                    b.ToTable("PartographGroupItem", "Partograph");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PartographGroupShareEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("PartographGroupId")
                        .HasColumnType("bigint");

                    b.Property<int?>("PermissionTypeId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PartographGroupId");

                    b.HasIndex("PermissionTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("PartographGroupShare", "Partograph");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PartographNotificationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("NotificationId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PartographId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("PartographId");

                    b.ToTable("PartographNotification", "Partograph");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PartographShareEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PartographId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PermissionTypeId")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PartographId");

                    b.HasIndex("PermissionTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("PartographShare", "Partograph");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PartographStateEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Favorite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAchived")
                        .HasColumnType("bit");

                    b.Property<Guid>("PartographId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Set")
                        .HasColumnType("bit");

                    b.Property<bool>("Silenced")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PartographId");

                    b.HasIndex("UserId");

                    b.ToTable("PartographState", "Partograph");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PartographVersionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ChangedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PartographDataJson")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<Guid>("PartographId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PartographId");

                    b.ToTable("PartographVersion", "Partograph");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PasswordEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Password", "Auth");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PasswordHistoryEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ChangedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OldPasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PasswordEntityId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PasswordEntityId");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordHistory", "Auth");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PermissionTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Identificator")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PermissionType", "Partograph");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2024, 10, 5, 22, 25, 39, 461, DateTimeKind.Local).AddTicks(2490),
                            Description = "Permisos de lectura",
                            Identificator = new Guid("110e6cf2-11c0-40ff-875c-163db0771537"),
                            Name = "Lectura"
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2024, 10, 5, 22, 25, 39, 461, DateTimeKind.Local).AddTicks(2504),
                            Description = "Permisos de escritura",
                            Identificator = new Guid("7c4efa24-88db-4125-aaf0-5c0713aebd55"),
                            Name = "Escritura"
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2024, 10, 5, 22, 25, 39, 461, DateTimeKind.Local).AddTicks(2506),
                            Description = "Permisos de lectura y escritura",
                            Identificator = new Guid("8fd5e6cd-bbb5-4ebe-b51b-ec3668f4cab6"),
                            Name = "Lectura y Escritura"
                        });
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PositionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Positions", "Partograph");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = " I",
                            Description = "Plano I"
                        },
                        new
                        {
                            Id = 2,
                            Code = "II",
                            Description = "Plano II"
                        },
                        new
                        {
                            Id = 3,
                            Code = "III",
                            Description = "Plano III"
                        },
                        new
                        {
                            Id = 4,
                            Code = "IV",
                            Description = "Plano IV"
                        });
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PresentationPositionVarietyEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HodgePlane")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid>("PartographId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HodgePlane");

                    b.HasIndex("PartographId");

                    b.HasIndex("Position");

                    b.ToTable("PresentationPositionVariety", "Partograph");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.RefreshTokenEntity", b =>
                {
                    b.Property<int>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefreshTokenId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshTokenValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken", "Auth");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PhoneNumber")
                        .HasColumnType("decimal(8,0)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User", "Auth");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.UserGroupEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroup", "Partograph");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.UserLoginAttemptEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AttemptTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("FailureReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLoginAttempt", "Auth");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.UserNotificationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Delivered")
                        .HasColumnType("bit");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("NotificationId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Viewed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ViewedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotification", "Notification");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.UserSessionHistoryEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Device")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SessionEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SessionStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSessionHistory", "Auth");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.WorkTimeEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Membrana")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Paridad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Posicion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkTime", "Partograph");

                    b.HasData(
                        new
                        {
                            Id = "VTI",
                            Membrana = "Integras",
                            Paridad = "Todas",
                            Posicion = "Vertical"
                        },
                        new
                        {
                            Id = "HMI",
                            Membrana = "Integras",
                            Paridad = "Multiparas",
                            Posicion = "Horizontal"
                        },
                        new
                        {
                            Id = "HMR",
                            Membrana = "Rotas",
                            Paridad = "Multiparas",
                            Posicion = "Horizontal"
                        },
                        new
                        {
                            Id = "HNI",
                            Membrana = "Integras",
                            Paridad = "Nuliparas",
                            Posicion = "Horizontal"
                        },
                        new
                        {
                            Id = "HNR",
                            Membrana = "Rotas",
                            Paridad = "Nuliparas",
                            Posicion = "Horizontal"
                        });
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.WorkTimeItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("CervicalDilation")
                        .HasColumnType("float");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<string>("WorkTimeId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("Id");

                    b.HasIndex("WorkTimeId");

                    b.ToTable("WorkTimeItem", "Partograph");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CervicalDilation = 6.0,
                            Time = new TimeSpan(0, 2, 10, 0, 0),
                            WorkTimeId = "VTI"
                        },
                        new
                        {
                            Id = 2,
                            CervicalDilation = 7.0,
                            Time = new TimeSpan(0, 1, 15, 0, 0),
                            WorkTimeId = "VTI"
                        },
                        new
                        {
                            Id = 3,
                            CervicalDilation = 8.0,
                            Time = new TimeSpan(0, 1, 0, 0, 0),
                            WorkTimeId = "VTI"
                        },
                        new
                        {
                            Id = 4,
                            CervicalDilation = 9.0,
                            Time = new TimeSpan(0, 0, 35, 0, 0),
                            WorkTimeId = "VTI"
                        },
                        new
                        {
                            Id = 5,
                            CervicalDilation = 10.0,
                            Time = new TimeSpan(0, 0, 25, 0, 0),
                            WorkTimeId = "VTI"
                        },
                        new
                        {
                            Id = 6,
                            CervicalDilation = 11.0,
                            Time = new TimeSpan(0, 0, 15, 0, 0),
                            WorkTimeId = "VTI"
                        },
                        new
                        {
                            Id = 7,
                            CervicalDilation = 6.0,
                            Time = new TimeSpan(0, 2, 30, 0, 0),
                            WorkTimeId = "HMI"
                        },
                        new
                        {
                            Id = 8,
                            CervicalDilation = 7.0,
                            Time = new TimeSpan(0, 1, 25, 0, 0),
                            WorkTimeId = "HMI"
                        },
                        new
                        {
                            Id = 9,
                            CervicalDilation = 8.0,
                            Time = new TimeSpan(0, 0, 55, 0, 0),
                            WorkTimeId = "HMI"
                        },
                        new
                        {
                            Id = 10,
                            CervicalDilation = 9.0,
                            Time = new TimeSpan(0, 0, 40, 0, 0),
                            WorkTimeId = "HMI"
                        },
                        new
                        {
                            Id = 11,
                            CervicalDilation = 10.0,
                            Time = new TimeSpan(0, 0, 25, 0, 0),
                            WorkTimeId = "HMI"
                        },
                        new
                        {
                            Id = 12,
                            CervicalDilation = 11.0,
                            Time = new TimeSpan(0, 0, 15, 0, 0),
                            WorkTimeId = "HMI"
                        },
                        new
                        {
                            Id = 13,
                            CervicalDilation = 6.0,
                            Time = new TimeSpan(0, 2, 30, 0, 0),
                            WorkTimeId = "HMR"
                        },
                        new
                        {
                            Id = 14,
                            CervicalDilation = 7.0,
                            Time = new TimeSpan(0, 1, 5, 0, 0),
                            WorkTimeId = "HMR"
                        },
                        new
                        {
                            Id = 15,
                            CervicalDilation = 8.0,
                            Time = new TimeSpan(0, 0, 35, 0, 0),
                            WorkTimeId = "HMR"
                        },
                        new
                        {
                            Id = 16,
                            CervicalDilation = 9.0,
                            Time = new TimeSpan(0, 0, 25, 0, 0),
                            WorkTimeId = "HMR"
                        },
                        new
                        {
                            Id = 17,
                            CervicalDilation = 10.0,
                            Time = new TimeSpan(0, 0, 10, 0, 0),
                            WorkTimeId = "HMR"
                        },
                        new
                        {
                            Id = 18,
                            CervicalDilation = 11.0,
                            Time = new TimeSpan(0, 0, 5, 0, 0),
                            WorkTimeId = "HMR"
                        },
                        new
                        {
                            Id = 19,
                            CervicalDilation = 6.0,
                            Time = new TimeSpan(0, 3, 15, 0, 0),
                            WorkTimeId = "HNI"
                        },
                        new
                        {
                            Id = 20,
                            CervicalDilation = 7.0,
                            Time = new TimeSpan(0, 1, 30, 0, 0),
                            WorkTimeId = "HNI"
                        },
                        new
                        {
                            Id = 21,
                            CervicalDilation = 8.0,
                            Time = new TimeSpan(0, 1, 0, 0, 0),
                            WorkTimeId = "HNI"
                        },
                        new
                        {
                            Id = 22,
                            CervicalDilation = 9.0,
                            Time = new TimeSpan(0, 0, 40, 0, 0),
                            WorkTimeId = "HNI"
                        },
                        new
                        {
                            Id = 23,
                            CervicalDilation = 10.0,
                            Time = new TimeSpan(0, 0, 35, 0, 0),
                            WorkTimeId = "HNI"
                        },
                        new
                        {
                            Id = 24,
                            CervicalDilation = 11.0,
                            Time = new TimeSpan(0, 0, 30, 0, 0),
                            WorkTimeId = "HNI"
                        },
                        new
                        {
                            Id = 25,
                            CervicalDilation = 6.0,
                            Time = new TimeSpan(0, 2, 30, 0, 0),
                            WorkTimeId = "HNR"
                        },
                        new
                        {
                            Id = 26,
                            CervicalDilation = 7.0,
                            Time = new TimeSpan(0, 1, 25, 0, 0),
                            WorkTimeId = "HNR"
                        },
                        new
                        {
                            Id = 27,
                            CervicalDilation = 8.0,
                            Time = new TimeSpan(0, 1, 5, 0, 0),
                            WorkTimeId = "HNR"
                        },
                        new
                        {
                            Id = 28,
                            CervicalDilation = 9.0,
                            Time = new TimeSpan(0, 0, 50, 0, 0),
                            WorkTimeId = "HNR"
                        },
                        new
                        {
                            Id = 29,
                            CervicalDilation = 10.0,
                            Time = new TimeSpan(0, 0, 35, 0, 0),
                            WorkTimeId = "HNR"
                        },
                        new
                        {
                            Id = 30,
                            CervicalDilation = 11.0,
                            Time = new TimeSpan(0, 0, 20, 0, 0),
                            WorkTimeId = "HNR"
                        });
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.CervicalDilationEntity", b =>
                {
                    b.HasOne("BirthflowService.Domain.Entities.PartographEntity", "Partograph")
                        .WithMany("CervicalDilationEntities")
                        .HasForeignKey("PartographId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partograph");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.ChildbirthNoteEntity", b =>
                {
                    b.HasOne("BirthflowService.Domain.Entities.PartographEntity", "Partograph")
                        .WithOne("BirthNote")
                        .HasForeignKey("BirthflowService.Domain.Entities.ChildbirthNoteEntity", "PartographId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partograph");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.ContractionFrequencyEntity", b =>
                {
                    b.HasOne("BirthflowService.Domain.Entities.PartographEntity", "Partograph")
                        .WithMany("ContractionFrequencyEntities")
                        .HasForeignKey("PartographId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partograph");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.FetalHeartRateEntity", b =>
                {
                    b.HasOne("BirthflowService.Domain.Entities.PartographEntity", "Partograph")
                        .WithMany("FetalHeartRateEntities")
                        .HasForeignKey("PartographId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partograph");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.MedicalSurveillanceTableEntity", b =>
                {
                    b.HasOne("BirthflowService.Domain.Entities.PartographEntity", "Partograph")
                        .WithMany("MedicalSurveillanceTableEntities")
                        .HasForeignKey("PartographId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partograph");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.NotificationEntity", b =>
                {
                    b.HasOne("BirthflowService.Domain.Entities.NotificationTypeEntity", "NotificationType")
                        .WithMany()
                        .HasForeignKey("NotificationTypeId");

                    b.Navigation("NotificationType");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PartographAuditLogEntity", b =>
                {
                    b.HasOne("BirthflowService.Domain.Entities.PartographVersionEntity", "PartographVersion")
                        .WithMany("AuditLogs")
                        .HasForeignKey("PartographVersionId");

                    b.Navigation("PartographVersion");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PartographEntity", b =>
                {
                    b.HasOne("BirthflowService.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("BirthflowService.Domain.Entities.WorkTimeEntity", "WorkTimeEntity")
                        .WithMany()
                        .HasForeignKey("WorkTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");

                    b.Navigation("WorkTimeEntity");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PartographGroupItemEntity", b =>
                {
                    b.HasOne("BirthflowService.Domain.Entities.PartographGroupEntity", "PartographGroup")
                        .WithMany("PartographGroupItems")
                        .HasForeignKey("PartographGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BirthflowService.Domain.Entities.PartographEntity", "Partograph")
                        .WithMany("PartographGroupItems")
                        .HasForeignKey("PartographId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partograph");

                    b.Navigation("PartographGroup");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PartographGroupShareEntity", b =>
                {
                    b.HasOne("BirthflowService.Domain.Entities.GroupEntity", "GroupEntity")
                        .WithMany("PartographGroupShares")
                        .HasForeignKey("GroupId");

                    b.HasOne("BirthflowService.Domain.Entities.PartographGroupEntity", "PartographGroupEntity")
                        .WithMany("PartographGroupShares")
                        .HasForeignKey("PartographGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BirthflowService.Domain.Entities.PermissionTypeEntity", "PermissionTypeEntity")
                        .WithMany()
                        .HasForeignKey("PermissionTypeId");

                    b.HasOne("BirthflowService.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany("PartographGroupShares")
                        .HasForeignKey("UserId");

                    b.Navigation("GroupEntity");

                    b.Navigation("PartographGroupEntity");

                    b.Navigation("PermissionTypeEntity");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PartographNotificationEntity", b =>
                {
                    b.HasOne("BirthflowService.Domain.Entities.NotificationEntity", "NotificationEntity")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BirthflowService.Domain.Entities.PartographEntity", "PartographEntity")
                        .WithMany()
                        .HasForeignKey("PartographId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationEntity");

                    b.Navigation("PartographEntity");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PartographShareEntity", b =>
                {
                    b.HasOne("BirthflowService.Domain.Entities.GroupEntity", "GroupEntity")
                        .WithMany("PartographShares")
                        .HasForeignKey("GroupId");

                    b.HasOne("BirthflowService.Domain.Entities.PartographEntity", "PartographEntity")
                        .WithMany("PartographShareEntity")
                        .HasForeignKey("PartographId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BirthflowService.Domain.Entities.PermissionTypeEntity", "PermissionTypeEntity")
                        .WithMany()
                        .HasForeignKey("PermissionTypeId");

                    b.HasOne("BirthflowService.Domain.Entities.UserEntity", "User")
                        .WithMany("PartographShareEntity")
                        .HasForeignKey("UserId");

                    b.Navigation("GroupEntity");

                    b.Navigation("PartographEntity");

                    b.Navigation("PermissionTypeEntity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PartographStateEntity", b =>
                {
                    b.HasOne("BirthflowService.Domain.Entities.PartographEntity", "PartographEntity")
                        .WithMany("PartographStateEntities")
                        .HasForeignKey("PartographId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BirthflowService.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany("PartographStateEntity")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartographEntity");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PartographVersionEntity", b =>
                {
                    b.HasOne("BirthflowService.Domain.Entities.PartographEntity", "PartographEntity")
                        .WithMany("PartographVersionEntities")
                        .HasForeignKey("PartographId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartographEntity");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PasswordEntity", b =>
                {
                    b.HasOne("BirthflowService.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany("Passwords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PasswordHistoryEntity", b =>
                {
                    b.HasOne("BirthflowService.Domain.Entities.PasswordEntity", null)
                        .WithMany("PasswordHistoryEntity")
                        .HasForeignKey("PasswordEntityId");

                    b.HasOne("BirthflowService.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PresentationPositionVarietyEntity", b =>
                {
                    b.HasOne("BirthflowService.Domain.Entities.HodgePlanesEntity", "HodgePlanesEntity")
                        .WithMany()
                        .HasForeignKey("HodgePlane")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BirthflowService.Domain.Entities.PartographEntity", "Partograph")
                        .WithMany("PresentationPositionVarietyEntities")
                        .HasForeignKey("PartographId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BirthflowService.Domain.Entities.PositionEntity", "PositionEntity")
                        .WithMany()
                        .HasForeignKey("Position")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HodgePlanesEntity");

                    b.Navigation("Partograph");

                    b.Navigation("PositionEntity");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.RefreshTokenEntity", b =>
                {
                    b.HasOne("BirthflowService.Domain.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.UserGroupEntity", b =>
                {
                    b.HasOne("BirthflowService.Domain.Entities.GroupEntity", "GroupEntity")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BirthflowService.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany("UserGroupEntity")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupEntity");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.UserLoginAttemptEntity", b =>
                {
                    b.HasOne("BirthflowService.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany("LoginAttempts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.UserNotificationEntity", b =>
                {
                    b.HasOne("BirthflowService.Domain.Entities.GroupEntity", "GroupEntity")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("BirthflowService.Domain.Entities.NotificationEntity", "NotificationEntity")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BirthflowService.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany("UserNotificationEntity")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupEntity");

                    b.Navigation("NotificationEntity");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.UserSessionHistoryEntity", b =>
                {
                    b.HasOne("BirthflowService.Domain.Entities.UserEntity", "UserEntity")
                        .WithMany("SessionHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.WorkTimeItemEntity", b =>
                {
                    b.HasOne("BirthflowService.Domain.Entities.WorkTimeEntity", "WorkTimeEntity")
                        .WithMany("WorkTimeItems")
                        .HasForeignKey("WorkTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkTimeEntity");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.GroupEntity", b =>
                {
                    b.Navigation("PartographGroupShares");

                    b.Navigation("PartographShares");

                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PartographEntity", b =>
                {
                    b.Navigation("BirthNote");

                    b.Navigation("CervicalDilationEntities");

                    b.Navigation("ContractionFrequencyEntities");

                    b.Navigation("FetalHeartRateEntities");

                    b.Navigation("MedicalSurveillanceTableEntities");

                    b.Navigation("PartographGroupItems");

                    b.Navigation("PartographShareEntity");

                    b.Navigation("PartographStateEntities");

                    b.Navigation("PartographVersionEntities");

                    b.Navigation("PresentationPositionVarietyEntities");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PartographGroupEntity", b =>
                {
                    b.Navigation("PartographGroupItems");

                    b.Navigation("PartographGroupShares");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PartographVersionEntity", b =>
                {
                    b.Navigation("AuditLogs");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.PasswordEntity", b =>
                {
                    b.Navigation("PasswordHistoryEntity");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("LoginAttempts");

                    b.Navigation("PartographGroupShares");

                    b.Navigation("PartographShareEntity");

                    b.Navigation("PartographStateEntity");

                    b.Navigation("Passwords");

                    b.Navigation("SessionHistories");

                    b.Navigation("UserGroupEntity");

                    b.Navigation("UserNotificationEntity");
                });

            modelBuilder.Entity("BirthflowService.Domain.Entities.WorkTimeEntity", b =>
                {
                    b.Navigation("WorkTimeItems");
                });
#pragma warning restore 612, 618
        }
    }
}
